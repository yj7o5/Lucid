package com;

import javax.swing.*;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreeModel;
import java.awt.*;
import java.awt.event.*;
import java.io.File;
import java.util.ArrayList;

public class Sandbox {
    private JTree projectPane;
    private JPanel mainPanel;
    private JTabbedPane tabPane;
    private JEditorPane editorTab1Pane;
    private JTextPane editorTab2Pane;
    private JTextArea terminalPane;

    /**
     * HEADER COMPS
     */
    private JButton fileButton;
    private JButton buildButton;
    private JPopupMenu projectButtonPopupMenu;
    private JPopupMenu fileButtonPopupMenu;

    public Sandbox() {

        // InitProjectPane();
        // InitEditorPane();
        // InitTerminalPane();
        SetupHeader();
        SetupProjectPane();
    }

    public static void main(String[] args) {
        initFrame("Lucid");
    }

    private static void initFrame(String title) {
        JFrame frame = new JFrame(title);
        frame.setContentPane(new Sandbox().mainPanel);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.pack();
        frame.setVisible(true);
    }

    private ArrayList<JMenuItem> createJMenuItems(String[] menus) {
        ArrayList<JMenuItem> jmenus = new ArrayList<JMenuItem>();
        for (String menu : menus) {
            JMenuItem m = new JMenuItem(menu);
            jmenus.add(m);

            m.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent actionEvent) {
                    if (actionEvent.getActionCommand() == "Open Project") {
                        openProject();
                    }
                }
            });
        }
        return jmenus;
    }

    private void openProject() {
        String projectName = JOptionPane.showInputDialog("Provide Project Name: ");

        JFileChooser chooser = new JFileChooser("f:");
        chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        chooser.setAcceptAllFileFilterUsed(false);

        if (chooser.showOpenDialog(mainPanel) == JFileChooser.APPROVE_OPTION) {
            projectPane.setModel(null);
            File selectedFile = chooser.getSelectedFile();
            DefaultMutableTreeNode root = new DefaultMutableTreeNode(selectedFile.getName());
            DefaultTreeModel model = new DefaultTreeModel(root);

            for (File o : selectedFile.listFiles()) {
                if (o.isHidden()) continue;
                DefaultMutableTreeNode n = new DefaultMutableTreeNode(o.getName());

                root.add(n);
            }

            projectPane.setModel(model);
        } else {
            System.out.println("No Selection ");
        }
    }

    private void SetupHeader() {
        projectButtonPopupMenu = new JPopupMenu();
        fileButtonPopupMenu = new JPopupMenu();

        // Project button menus: creating new file; creating new project; or closing project
        for (JMenuItem menu : createJMenuItems(new String[]{"New File", "New Project", "Close Project"})) {
            projectButtonPopupMenu.add(menu);
        }
        // File button menus: opening another project; saving project
        for (JMenuItem menu : createJMenuItems(new String[]{"Open Project", "Save Project"})) {
            fileButtonPopupMenu.add(menu);
        }

        fileButton.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                if (!SwingUtilities.isLeftMouseButton(e)) return;

                fileButtonPopupMenu.show(e.getComponent(), e.getX(), e.getY());
            }
        });

        projectPane.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                if (!SwingUtilities.isRightMouseButton(e)) return;

                int row = projectPane.getClosestRowForLocation(e.getX(), e.getY());

                // Check if root folders being clicked
                if (row != 0) return;

                projectPane.setSelectionRow(row);
                projectButtonPopupMenu.show(e.getComponent(), e.getX(), e.getY());
            }
        });
    }

    private void SetupProjectPane() {
        projectPane.setModel(null);
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        mainPanel = new JPanel();
        mainPanel.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(2, 2, new Insets(0, 0, 0, 0), -1, -1));
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(1, 2, new Insets(0, 0, 0, 0), -1, -1));
        mainPanel.add(panel1, new com.intellij.uiDesigner.core.GridConstraints(1, 0, 1, 2, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        projectPane = new JTree();
        projectPane.setBackground(new Color(-3949910));
        projectPane.setForeground(new Color(-1319733));
        panel1.add(projectPane, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, 50), null, 2, false));
        final JPanel panel2 = new JPanel();
        panel2.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(2, 1, new Insets(0, 0, 0, 0), -1, -1));
        panel1.add(panel2, new com.intellij.uiDesigner.core.GridConstraints(0, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        tabPane = new JTabbedPane();
        tabPane.setTabPlacement(1);
        panel2.add(tabPane, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, null, new Dimension(200, 200), null, 0, false));
        final JPanel panel3 = new JPanel();
        panel3.setLayout(new BorderLayout(0, 0));
        tabPane.addTab("main.java", panel3);
        editorTab1Pane = new JEditorPane();
        panel3.add(editorTab1Pane, BorderLayout.CENTER);
        final JPanel panel4 = new JPanel();
        panel4.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        panel4.setToolTipText("");
        tabPane.addTab("Untitled", panel4);
        editorTab2Pane = new JTextPane();
        panel4.add(editorTab2Pane, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, null, new Dimension(150, 50), null, 0, false));
        terminalPane = new JTextArea();
        terminalPane.setColumns(0);
        terminalPane.setEditable(false);
        terminalPane.setLineWrap(true);
        terminalPane.setText("Build Ouput: Successful");
        terminalPane.setWrapStyleWord(true);
        terminalPane.putClientProperty("caretWidth", new Integer(2));
        panel2.add(terminalPane, new com.intellij.uiDesigner.core.GridConstraints(1, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, null, new Dimension(150, 50), null, 0, false));
        final JPanel panel5 = new JPanel();
        panel5.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(1, 2, new Insets(0, 0, 0, 0), -1, -1));
        mainPanel.add(panel5, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, new Dimension(-1, 50), null, new Dimension(-1, 50), 0, false));
        fileButton = new JButton();
        fileButton.setHorizontalAlignment(0);
        fileButton.setText("File");
        fileButton.setVerticalTextPosition(0);
        panel5.add(fileButton, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(20, 10), null, 1, false));
        buildButton = new JButton();
        buildButton.setText("Build");
        panel5.add(buildButton, new com.intellij.uiDesigner.core.GridConstraints(0, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(20, 10), null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return mainPanel;
    }

}
